Connected Services: подключенные сервисы из Azure

Dependencies: все добавленные в проект пакеты и библиотеки, иначе говоря зависимости

Properties: узел, который содержит некоторые настройки проекта. В частности, в файле launchSettings.json описаны настройки запуска проекта, например, адреса, по которым будет запускаться приложение.

appsettings.json: файл конфигурации проекта в формате json

Program.cs: главный файл приложения, с которого и начинается его выполнение. Код этого файла настривает и запускает веб-хост, в рамках которого разворачивается приложение

Startup.cs: файл, который определяет класс Startup и который содержит логику обработки входящих запросов

////////////////////////////////////////////////////

Host.CreateDefaultBuilder(args) выполняет ряд задач:

Устанавливает корневой каталог (для этого используется свойство Directory.GetCurrentDirectory). Корневой каталог представляет папку, где будет производиться поиск различного содержимого, например, представлений.

Устанавливает конфигурацию хоста. Для этого загружаются переменные среды с префиксом "DOTNET_" и аргументы командной строки

Устанавливает конфигурацию приложения. Для этого загружается содержимое из файлов appsettings.json и appsettings.{Environment}.json, а также переменные среды и аргументы командной строки. Если приложение в статусе разработки, то также используются данные Secret Manager (менеджера секретов), который позволяет сохранить конфиденциальные данные, используемые при разработке.

Добавляет провайдеры логирования

Если проект в статусе разработки, то также обеспечивает валидацию сервисов

////////////////////////////////////////////////////

ConfigureWebHostDefaults() выполняет конфигурацию параметров хоста, а именно:

Загружает конфигурацию из переменных среды с префиксом "ASPNETCORE_"

Запускает и настраивает веб-сервер Kestrel, в рамках которого будет разворачиваться приложение

Добавляет компонент Host Filtering, который позволяет настраивать адреса для веб-сервера Kestrel

Если переменная окружения ASPNETCORE_FORWARDEDHEADERS_ENABLED равна true, добавляет компонент Forwarded Headers, который позволяет считывать из запроса заголовки "X-Forwarded-"

Если для работы приложения требуется IIS, то данный метод также обеспечивает интеграцию с IIS

///////////////////////////////////////////////////////////

По умолчанию ASP.NET Core предоставляет следующие встроенные компоненты middleware:

Authentication: предоставляет поддержку аутентификации

Cookie Policy: отслеживает согласие пользователя на хранение связанной с ним информации в куках

CORS: обеспечивает поддержку кроссдоменных запросов

Diagnostics: предоставляет страницы статусных кодов, функционал обработки исключений, страницу исключений разработчика

Forwarded Headers: перенаправляет зголовки запроса

Health Check: проверяет работоспособность приложения asp.net core

HTTP Method Override: позволяет входящему POST-запросу переопределить метод

HTTPS Redirection: перенаправляет все запросы HTTP на HTTPS

HTTP Strict Transport Security (HSTS): для улучшения безопасности приложения добавляет специальный заголовок ответа

MVC: обеспечивает функционал фреймворка MVC

Request Localization: обеспечивает поддержку локализации

Response Caching: позволяет кэшировать результаты запросов

Response Compression: обеспечивает сжатие ответа клиенту

URL Rewrite: предоставляет функциональность URL Rewriting

Endpoint Routing: предоставляет механизм маршрутизации

Session: предоставляет поддержку сессий

Static Files: предоставляет поддержку обработки статических файлов

WebSockets: добавляет поддержку протокола WebSockets