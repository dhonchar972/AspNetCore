Для использования системы маршрутизации в конвейер обработки запроса добавляются два встроенных компонента middleware:

- Microsoft.AspNetCore.Routing.EndpointMiddleware добавляет в конвейер обработки запроса конечные точки.
Добавляется в конвейер с помощью метода UseEndpoints()

- Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware добавляет в конвейер обработки запроса функциональность 
сопоставления запросов и маршрутов. Данный middleware выбирает конечную точку, которая соответствует запросу и 
которая затем обрабатывает запрос. Добавляется в конвейер с помощью метода UseRouting()

Причем обычно не требуется явным образом подключать эти два компонента middleware. 
Объект WebApplicationBuilder автоматически сконфигурирует конвейер таким образом, что эти два middleware 
добавляются при использовании конечных точек.

var builder = WebApplication.CreateBuilder();
var app = builder.Build();
 
app.Map("/", () => "Index Page");
app.Map("/about", () => "About Page");
app.Map("/contact", () => "Contacts Page");
app.MapGet("/routes", (IEnumerable<EndpointDataSource> endpointSources) =>
       string.Join("\n", endpointSources.SelectMany(source => source.Endpoints)));

app.Run();

//or

var builder = WebApplication.CreateBuilder();
var app = builder.Build();
 
app.Map("/", IndexHandler);
app.Map("/user", UserHandler);
 
app.Run();
 
string IndexHandler()
{
    return "Index Page";
}
Person UserHandler()
{
    return new Person("Tom", 37);
}
record class Person(string Name, int Age);

//or

var builder = WebApplication.CreateBuilder();
var app = builder.Build();
 
app.Map("/", () => "Index Page");
app.Map("/about", async (context) =>
{
    await context.Response.WriteAsync("About Page");
});
app.Run();


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//parameters
var builder = WebApplication.CreateBuilder();
var app = builder.Build();
 
app.Map("/users/{id}", (string id) => $"User Id: {id}");
app.Map("/users", () => "Users Page");
app.Map("/", () => "Index Page");
 
app.Run();

//or

var builder = WebApplication.CreateBuilder();
var app = builder.Build();
 
app.Map(
    "/users/{id}/{name}", // or // "/users/{id}-{name}" // подойдет любой разделитель // "/users/{id}and{name}"
    (string id, string name) => $"User Id: {id}   User Name: {name}"
);
app.Map("/users", () => "Users Page");
app.Map("/", () => "Index Page");
 
app.Run();

//

var builder = WebApplication.CreateBuilder();
var app = builder.Build();
 
app.Map("/users/{id?}", (string? id) => $"User Id: {id??"Undefined"}");
app.Map("/", () => "Index Page");
 
app.Run();

//

var builder = WebApplication.CreateBuilder();
var app = builder.Build();
 
app.Map(
    "{controller=Home}/{action=Index}/{id?}", 
    (string controller, string action, string? id) =>
        $"Controller: {controller} \nAction: {action} \nId: {id}"
);
 
app.Run();

//произвольное количество параметров в запросе
var builder = WebApplication.CreateBuilder();
var app = builder.Build();
 
app.Map("users/{**info}", (string info) =>$"User Info: {info}");
 
app.Map("/", () => "Index Page");
 
app.Run();

/////////////////////////
Parameter constraints - ограничения параметров
int
Соответствие целому числу. Представляет класс IntRouteConstraint
{id:int}

bool. Представляет класс BoolRouteConstraint
Соответствие значению true или false
{active:bool}

datetime
Соответствие дате и времени. Представляет класс DateTimeRouteConstraint
{date:datetime}

decimal
Соответствие значению decimal. Представляет класс DecimalRouteConstraint
{price:decimal}

double
Соответствие значению типа double. Представляет класс DoubleRouteConstraint
{weight:double}

float
Соответствие значению типа float. Представляет класс FloatRouteConstraint
{height:float}

guid
Соответствие значению типа Guid. Представляет класс GuidRouteConstraint
{id:guid}

long
Соответствие значению типа long. Представляет класс LongRouteConstraint
{id:long}

minlength(value)
Строка должна иметь символов не меньше value. Представляет класс MinLengthRouteConstraint
{name:minlength(3)}

maxlength(value)
Строка должна иметь символов не больше value. Представляет класс MaxLengthRouteConstraint
{name:maxlength(20)}

length(value)
Строка должна иметь ровно столько символов, сколько определено в параметре value. Представляет класс LengthRouteConstraint
{name:length(0)}

length(min, max)
Строка должна иметь символов не меньше min и не больше max. Представляет класс LengthRouteConstraint
{name:length(3, 20)}

min(value)
Число должно быть не меньше value. Представляет класс MinRouteConstraint
{age:min(3)}

max(value)
Число должно быть не больше value. Представляет класс MaxRouteConstraint
{age:max(20)}

range(min, max)
Число должно быть не меньше min и не больше max. Представляет класс RangeRouteConstraint
{age:range(8, 99)}

alpha
Строка должна состоять из одного и более алфавитных символов. Представляет класс AlphaRouteConstraint
{name:alpha}

regex(expression)
Строка должна соответствовать регулярному выражению expression. Представляет класс RegexRouteConstraint
{phone:regex(^\d{{3}}-\d{{3}}-\d{{4}}$)}

required
Параметр является обязательным, и его значение должно быть определено. Представляет класс RequiredRouteConstraint
{name:required}

var builder = WebApplication.CreateBuilder();
var app = builder.Build();
 
app.Map(
    "/users/{name:alpha:minlength(2)}/{age:int:range(1, 110)}",
    (string name, int age) => $"User Age: {age} \nUser Name:{name}"
);
app.Map(
    "/phonebook/{phone:regex(^7-\\d{{3}}-\\d{{3}}-\\d{{4}}$)}/",
    (string phone) => $"Phone: {phone}"
);
app.Map("/", () => "Index Page");
 
 
app.Run();

//Routing constraints
public interface IRouteConstraint
{
    bool Match(HttpContext? httpContext,
            IRouter? route,
            string routeKey,
            RouteValueDictionary values,
            RouteDirection routeDirection);
}

public class SecretCodeConstraint : IRouteConstraint
{
    string secretCode;    // допустимый код
    public SecretCodeConstraint(string secretCode)
    {
        this.secretCode = secretCode;
    }
 
    public bool Match(HttpContext? httpContext, IRouter? route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection)
    {
        return values[routeKey]?.ToString() == secretCode;
    }
}

var builder = WebApplication.CreateBuilder();
// проецируем класс SecretCodeConstraint на inline-ограничение secretcode
builder.Services.Configure<RouteOptions>(options => options.ConstraintMap.Add("secretcode", typeof(SecretCodeConstraint)));
                 
// альтернативное добавление класса ограничения
// builder.Services.AddRouting(options => options.ConstraintMap.Add("secretcode", typeof(SecretConstraint)));
 
var app = builder.Build();
 
app.Map(
    "/users/{name}/{token:secretcode(123466)}/",
    (string name, int token) => $"Name: {name} \nToken: {token}"
);
app.Map("/", () => "Index Page");
 
app.Run();

public class InvalidNamesConstraint : IRouteConstraint
{
    string[] names = new[] { "Tom", "Sam", "Bob" };
    public bool Match(HttpContext? httpContext, IRouter? route, string routeKey,
        RouteValueDictionary values, RouteDirection routeDirection)
    {
        return !names.Contains(values[routeKey]?.ToString());
    }
}
//////////////////////////////////////
builder.Services.AddRouting(options =>
                options.ConstraintMap.Add("secretcode", typeof(SecretConstraint)));